from flask import Flask, request
import telebot
import json
import random
import threading
import time
import re
import os

TOKEN = '7947429084:AAECl4VTgRdgv53IAixvZ5qgDMvABI8_d0o'
ADMIN_ID = 6454516935  # Telegram ID-–∏ –∞–¥–º–∏–Ω–∏ –∞—Å–ª”£

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ë–∞–∑–∞–∏ –º–∞—ä–ª—É–º–æ—Ç
try:
    with open("data.json", "r") as f:
        db = json.load(f)
except:
    db = {"movies": {}, "channels": [], "admins": [ADMIN_ID], "collections": {}, "delete_time": 30}

if "admins" not in db:
    db["admins"] = [ADMIN_ID]

if "collections" not in db:
    db["collections"] = {}

if "delete_time" not in db:
    db["delete_time"] = 30  # –í–∞“õ—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç”£ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º“≥–æ (30 —Å–æ–Ω–∏—è)

def save_db():
    with open("data.json", "w") as f:
        json.dump(db, f)

def is_subscribed(user_id):
    for channel in db["channels"]:
        try:
            status = bot.get_chat_member(channel, user_id).status
            if status in ['member', 'administrator', 'creator']:
                continue
            else:
                return False
        except:
            return False
    return True

def is_admin(user_id):
    return user_id in db["admins"]

def extract_channel_username(text):
    # –°–∞–Ω“∑–∏–¥–∞–Ω–∏ –ª–∏–Ω–∫–∏ –º—É—Å—Ç–∞“õ–∏–º
    if "t.me/" in text:
        match = re.search(r't\.me/(\w+)', text)
        if match:
            return "@" + match.group(1)
    # –ê–≥–∞—Ä –Ω–æ–º–∏ –∫–∞–Ω–∞–ª –±–æ—à–∞–¥, "@" –∏–ª–æ–≤–∞ –º–µ–∫—É–Ω–µ–º –∞–≥–∞—Ä –Ω–∞–±–æ—à–∞–¥
    elif text.startswith("@"):
        return text
    else:
        return "@" + text

user_states = {}
movie_info_temp = {}
collection_temp = {}

# –†–æ—É—Ç –±–∞—Ä–æ–∏ webhook
@app.route(f'/{TOKEN}', methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return 'ok', 200

@app.route('/')
def index():
    return "Bot is running!", 200

# –•–∞–Ω–¥–ª–µ—Ä“≥–æ
@bot.message_handler(commands=["start"])
def start(msg):
    if is_subscribed(msg.chat.id):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîç “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º", "üì∫ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
        markup.add("‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ")
        
        if is_admin(msg.from_user.id):
            markup.add("üë®‚Äçüíª –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")
            
        bot.send_message(msg.chat.id, "**–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ –±–æ—Ç–∏ —Ñ–∏–ª–º“≥–æ!**", reply_markup=markup, parse_mode="Markdown")
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        for ch in db["channels"]:
            markup.add(telebot.types.InlineKeyboardButton("–û–±—É–Ω–∞ —à—É–¥–∞–Ω", url=f"https://t.me/{ch.replace('@', '')}"))
        markup.add(telebot.types.InlineKeyboardButton("–°–∞–Ω“∑–∏—à", callback_data="check_sub"))
        bot.send_message(msg.chat.id, "**–ê–≤–≤–∞–ª –±–∞ –∫–∞–Ω–∞–ª“≥–æ –æ–±—É–Ω–∞ —à–∞–≤–µ–¥:**", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üîç “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º")
def search_movie_handler(msg):
    if is_subscribed(msg.chat.id):
        user_states[msg.chat.id] = "waiting_for_movie_id"
        bot.send_message(msg.chat.id, "**–õ—É—Ç—Ñ–∞–Ω ID —Ñ–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:**", parse_mode="Markdown")
    else:
        start(msg)

@bot.message_handler(func=lambda msg: msg.text == "üì∫ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
def new_movies(msg):
    if is_subscribed(msg.chat.id):
        # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ 5 —Ñ–∏–ª–º–∏ –æ—Ö–∏—Ä–∏–Ω
        movie_ids = list(db["movies"].keys())
        if movie_ids:
            response = "**–§–∏–ª–º“≥–æ–∏ –Ω–∞–≤:**\n\n"
            # –ì–∏—Ä–∏—Ñ—Ç–∞–Ω–∏ —Ç–æ 5 —Ñ–∏–ª–º–∏ –æ—Ö–∏—Ä–∏–Ω
            for movie_id in movie_ids[-5:]:
                info = db["movies"][movie_id].get("info", "")
                response += f"**üé¨ ID: {movie_id}**\n{info}\n\n"
            bot.send_message(msg.chat.id, response, parse_mode="Markdown")
        else:
            bot.send_message(msg.chat.id, "**“≤–æ–ª–æ —è–≥–æ–Ω —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç.**", parse_mode="Markdown")
    else:
        start(msg)

@bot.message_handler(func=lambda msg: msg.text == "‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ")
def about_us(msg):
    if is_subscribed(msg.chat.id):
        bot.send_message(msg.chat.id, "**–ò–Ω –±–æ—Ç –±–∞—Ä–æ–∏ —Ç–∞–º–æ—à–æ–∏ —Ñ–∏–ª–º“≥–æ –±–æ —Å–∏—Ñ–∞—Ç–∏ –±–∞–ª–∞–Ω–¥ —Ç–∞–π—ë—Ä —à—É–¥–∞–∞—Å—Ç.**\n\n**–ë–∞—Ä–æ–∏ –¥–∞—Å—Ç—Ä–∞—Å”£ –±–∞ —Ñ–∏–ª–º“≥–æ, ID-–∏ —Ñ–∏–ª–º—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.**", parse_mode="Markdown")
    else:
        start(msg)

@bot.callback_query_handler(func=lambda call: call.data == "check_sub")
def check_sub(call):
    if is_subscribed(call.message.chat.id):
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîç “∂—É—Å—Ç—É“∑”Ø–∏ —Ñ–∏–ª–º", "üì∫ –§–∏–ª–º“≥–æ–∏ –Ω–∞–≤")
        markup.add("‚ÑπÔ∏è –î–∞—Ä –±–æ—Ä–∞–∏ –º–æ")
        
        if is_admin(call.message.chat.id):
            markup.add("üë®‚Äçüíª –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω")
            
        bot.send_message(call.message.chat.id, "**–û—Ñ–∞—Ä–∏–Ω! –®—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –±–æ—Ç—Ä–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–µ–¥.**", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(call.message.chat.id, "**–õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –æ–±—É–Ω–∞ —à–∞–≤–µ–¥.**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üë®‚Äçüíª –ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω" and is_admin(msg.from_user.id))
def panel(msg):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –ò–ª–æ–≤–∞–∏ –§–∏–ª–º", "‚ûï –ò–ª–æ–≤–∞–∏ –ö–∞–Ω–∞–ª")
    markup.add("‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∏–ª–º", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ö–∞–Ω–∞–ª")
    markup.add("üìö –ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ")
    markup.add("üë®‚Äçüíº –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω“≥–æ")
    markup.add("‚è± –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –≤–∞“õ—Ç", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markup.add("üóë –¢–æ–∑–∞–∫—É–Ω–∏–∏ –∫—ç—à", "üîÑ –ë–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω”£")
    markup.add("üîô –ë–æ–∑–≥–∞—à—Ç")
    bot.send_message(msg.chat.id, "**–ü–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω:**", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üë®‚Äçüíº –ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω“≥–æ" and is_admin(msg.from_user.id))
def admin_management(msg):
    if msg.from_user.id == ADMIN_ID:  # –§–∞“õ–∞—Ç –∞–¥–º–∏–Ω–∏ –∞—Å–ª”£ –º–µ—Ç–∞–≤–æ–Ω–∞–¥ –∞–¥–º–∏–Ω“≥–æ—Ä–æ –∏–¥–æ—Ä–∞ –∫—É–Ω–∞–¥
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚ûï –ò–ª–æ–≤–∞–∏ –∞–¥–º–∏–Ω", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω")
        markup.add("üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª")
        bot.send_message(msg.chat.id, "**–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω“≥–æ:**", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "**–®—É–º–æ –∏“∑–æ–∑–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –∞–¥–º–∏–Ω" and msg.from_user.id == ADMIN_ID)
def add_admin(msg):
    user_states[msg.chat.id] = "waiting_for_admin_id"
    bot.send_message(msg.chat.id, "**ID-–∏ –∞–¥–º–∏–Ω–∏ –Ω–∞–≤—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω" and msg.from_user.id == ADMIN_ID)
def delete_admin(msg):
    if len(db["admins"]) > 1:
        # –°–æ—Ö—Ç–∞–Ω–∏ –∫–Ω–æ–ø–∫–∞“≥–æ–∏ —à–∏—à–∞–≥–∏–Ω –±–∞—Ä–æ–∏ “≥–∞—Ä —è–∫ –∞–¥–º–∏–Ω
        markup = telebot.types.InlineKeyboardMarkup()
        for admin_id in db["admins"]:
            if admin_id != ADMIN_ID:  # –ê–¥–º–∏–Ω–∏ –∞—Å–ª–∏—Ä–æ –Ω–∏—à–æ–Ω –Ω–∞–º–µ–¥–∏“≥–µ–º
                markup.add(telebot.types.InlineKeyboardButton(
                    f"üóë Admin ID: {admin_id}", 
                    callback_data=f"del_admin_{admin_id}"
                ))
        
        markup.add(telebot.types.InlineKeyboardButton("üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_admin_panel"))
        bot.send_message(msg.chat.id, "**–ê–¥–º–∏–Ω—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:**", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "**–î–∞—Ä —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–Ω“≥–æ —è–∫ –∞–¥–º–∏–Ω –º–∞–≤“∑—É–¥ –∞—Å—Ç.**", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_admin_"))
def callback_delete_admin(call):
    if call.from_user.id == ADMIN_ID:
        admin_id = int(call.data.split("_")[2])
        if admin_id in db["admins"] and admin_id != ADMIN_ID:
            db["admins"].remove(admin_id)
            save_db()
            bot.answer_callback_query(call.id, f"–ê–¥–º–∏–Ω –±–æ ID {admin_id} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥")
            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id,
                text=f"**–ê–¥–º–∏–Ω –±–æ ID {admin_id} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.**",
                parse_mode="Markdown"
            )
        else:
            bot.answer_callback_query(call.id, "–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–¥–º–∏–Ω")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_admin_panel")
def callback_back_to_admin(call):
    if call.from_user.id == ADMIN_ID:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        admin_management(call.message)

@bot.message_handler(func=lambda msg: msg.text == "üìö –ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ" and is_admin(msg.from_user.id))
def collection_menu(msg):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –°–æ—Ö—Ç–∞–Ω–∏ –º–∞“∑–º”Ø–∞", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“∑–º”Ø–∞")
    markup.add("üìã –†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ")
    markup.add("üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª")
    bot.send_message(msg.chat.id, "**–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –º–∞“∑–º”Ø–∞“≥–æ–∏ —Ñ–∏–ª–º:**", reply_markup=markup, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –°–æ—Ö—Ç–∞–Ω–∏ –º–∞“∑–º”Ø–∞" and is_admin(msg.from_user.id))
def create_collection(msg):
    collection_temp[msg.chat.id] = {"movies": []}
    user_states[msg.chat.id] = "waiting_for_collection_movie"
    
    # –ö–Ω–æ–ø–∫–∞–∏ [ –∞–Ω“∑–æ–º ] –¥–∞—Ä –ø–æ—ë–Ω 
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("[ –∞–Ω“∑–æ–º ]")
    
    bot.send_message(
        msg.chat.id, 
        "**–§–∏–ª–º“≥–æ—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ (—Ç–æ 10 —Ñ–∏–ª–º –º–µ—Ç–∞–≤–æ–Ω–µ–¥).**\n**–ë–∞—Ä–æ–∏ –∞–Ω“∑–æ–º –∫–Ω–æ–ø–∫–∞–∏ [ –∞–Ω“∑–æ–º ] –ø–∞—Ö—à –∫—É–Ω–µ–¥:**", 
        reply_markup=markup,
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“∑–º”Ø–∞" and is_admin(msg.from_user.id))
def delete_collection(msg):
    if db["collections"]:
        markup = telebot.types.InlineKeyboardMarkup()
        for coll_id, info in db["collections"].items():
            markup.add(telebot.types.InlineKeyboardButton(
                f"üóë ID: {coll_id} ({len(info['movies'])} —Ñ–∏–ª–º)", 
                callback_data=f"del_coll_{coll_id}"
            ))
        
        markup.add(telebot.types.InlineKeyboardButton("üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_collection_menu"))
        bot.send_message(msg.chat.id, "**–ú–∞“∑–º”Ø–∞—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:**", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "**–Ø–≥–æ–Ω –º–∞“∑–º”Ø–∞ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.**", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_coll_"))
def callback_delete_collection(call):
    if is_admin(call.from_user.id):
        coll_id = call.data.split("_")[2]
        if coll_id in db["collections"]:
            del db["collections"][coll_id]
            save_db()
            bot.answer_callback_query(call.id, f"–ú–∞“∑–º”Ø–∞ –±–æ ID {coll_id} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥")
            bot.edit_message_text(
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id,
                text=f"**–ú–∞“∑–º”Ø–∞ –±–æ ID {coll_id} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.**",
                parse_mode="Markdown"
            )
        else:
            bot.answer_callback_query(call.id, "–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“∑–º”Ø–∞")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_collection_menu")
def callback_back_to_collection(call):
    if is_admin(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        collection_menu(call.message)

@bot.message_handler(func=lambda msg: msg.text == "üìã –†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ" and is_admin(msg.from_user.id))
def list_collections(msg):
    if db["collections"]:
        collections = "\n\n".join([f"**üé¨ ID: {coll_id}**\n**–®—É–º–æ—Ä–∞–∏ —Ñ–∏–ª–º“≥–æ: {len(info['movies'])}**" 
                                 for coll_id, info in db["collections"].items()])
        bot.send_message(msg.chat.id, f"**–†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ:**\n\n{collections}", parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "**–Ø–≥–æ–Ω –º–∞“∑–º”Ø–∞ –º–∞–≤“∑—É–¥ –Ω–µ—Å—Ç.**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_collection_movie")
def add_movie_to_collection(msg):
    if msg.text == "–∞–Ω“∑–æ–º" or msg.text == "[ –∞–Ω“∑–æ–º ]":
        if collection_temp[msg.chat.id]["movies"]:
            collection_id = str(random.randint(1000, 9999))
            while collection_id in db["collections"]:
                collection_id = str(random.randint(1000, 9999))
                
            db["collections"][collection_id] = collection_temp[msg.chat.id]
            save_db()
            
            # –ë–∞—Ä“õ–∞—Ä–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∞–¥–º–∏–Ω
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("‚ûï –°–æ—Ö—Ç–∞–Ω–∏ –º–∞“∑–º”Ø–∞", "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –º–∞“∑–º”Ø–∞")
            markup.add("üìã –†”Ø–π—Ö–∞—Ç–∏ –º–∞“∑–º”Ø–∞“≥–æ")
            markup.add("üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª")
            
            bot.send_message(
                msg.chat.id, 
                f"**–ú–∞“∑–º”Ø–∞ —Å–æ—Ö—Ç–∞ —à—É–¥. ID –º–∞“∑–º”Ø–∞: {collection_id}**", 
                reply_markup=markup,
                parse_mode="Markdown"
            )
            del collection_temp[msg.chat.id]
            user_states.pop(msg.chat.id)
        else:
            bot.send_message(msg.chat.id, "**–®—É–º–æ –±–æ—è–¥ “≥–∞–¥–¥–∏ –∞“õ–∞–ª —è–∫ —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥.**", parse_mode="Markdown")
    elif msg.content_type == 'video':
        if len(collection_temp[msg.chat.id]["movies"]) >= 10:
            bot.send_message(msg.chat.id, "**–®—É–º–æ –∞–ª–ª–∞–∫–∞–π 10 —Ñ–∏–ª–º –∏–ª–æ–≤–∞ –∫–∞—Ä–¥–µ–¥. –ë–∞—Ä–æ–∏ –∞–Ω“∑–æ–º [ –∞–Ω“∑–æ–º ] –ø–∞—Ö—à –∫—É–Ω–µ–¥.**", parse_mode="Markdown")
        else:
            movie_data = {"file_id": msg.video.file_id}
            collection_temp[msg.chat.id]["movies"].append(movie_data)
            movie_count = len(collection_temp[msg.chat.id]["movies"])
            
            bot.send_message(
                msg.chat.id, 
                f"**–§–∏–ª–º–∏ {movie_count}/10 –∏–ª–æ–≤–∞ —à—É–¥. –§–∏–ª–º–∏ –Ω–∞–≤–±–∞—Ç–∏—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë [ –∞–Ω“∑–æ–º ] –ø–∞—Ö—à –∫—É–Ω–µ–¥:**", 
                parse_mode="Markdown"
            )
    else:
        bot.send_message(msg.chat.id, "**–õ—É—Ç—Ñ–∞–Ω —Ñ–∏–ª–º —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë [ –∞–Ω“∑–æ–º ] –ø–∞—Ö—à –∫—É–Ω–µ–¥.**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_admin_id")
def process_add_admin(msg):
    try:
        admin_id = int(msg.text)
        if admin_id not in db["admins"]:
            db["admins"].append(admin_id)
            save_db()
            bot.send_message(msg.chat.id, f"**–ê–¥–º–∏–Ω –±–æ ID {admin_id} –∏–ª–æ–≤–∞ —à—É–¥.**", parse_mode="Markdown")
        else:
            bot.send_message(msg.chat.id, "**–ò–Ω ID –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä —Ä”Ø–π—Ö–∞—Ç–∏ –∞–¥–º–∏–Ω“≥–æ –º–∞–≤“∑—É–¥ –∞—Å—Ç.**", parse_mode="Markdown")
    except ValueError:
        bot.send_message(msg.chat.id, "**–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.**", parse_mode="Markdown")
    user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –§–∏–ª–º" and is_admin(msg.from_user.id))
def add_movie(msg):
    user_states[msg.chat.id] = "waiting_for_movie"
    bot.send_message(msg.chat.id, "**–§–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –ò–ª–æ–≤–∞–∏ –ö–∞–Ω–∞–ª" and is_admin(msg.from_user.id))
def add_channel(msg):
    user_states[msg.chat.id] = "waiting_for_channel"
    bot.send_message(msg.chat.id, "**–ù–æ–º–∏ –∫–∞–Ω–∞–ª —ë –ª–∏–Ω–∫–∏ –º—É—Å—Ç–∞“õ–∏–º–∏ –æ–Ω—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:**\n**(–º–∏—Å–æ–ª: @kanal —ë t.me/kanal)**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∏–ª–º" and is_admin(msg.from_user.id))
def delete_movie(msg):
    user_states[msg.chat.id] = "waiting_for_delete_movie"
    bot.send_message(msg.chat.id, "**ID-–∏ —Ñ–∏–ª–º—Ä–æ –Ω–∞–≤–∏—Å–µ–¥ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω:**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ö–∞–Ω–∞–ª" and is_admin(msg.from_user.id))
def delete_channel(msg):
    if db["channels"]:
        markup = telebot.types.InlineKeyboardMarkup()
        for ch in db["channels"]:
            markup.add(telebot.types.InlineKeyboardButton(f"üóë {ch}", callback_data=f"del_ch_{db['channels'].index(ch)}"))
        
        markup.add(telebot.types.InlineKeyboardButton("üîô –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_panel"))
        bot.send_message(msg.chat.id, "**–ö–∞–Ω–∞–ª—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:**", reply_markup=markup, parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "**–ö–∞–Ω–∞–ª —ë—Ñ—Ç –Ω–∞—à—É–¥.**", parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_ch_"))
def callback_delete_channel(call):
    if is_admin(call.from_user.id):
        try:
            index = int(call.data.split("_")[2])
            if 0 <= index < len(db["channels"]):
                ch = db["channels"].pop(index)
                save_db()
                bot.answer_callback_query(call.id, f"–ö–∞–Ω–∞–ª {ch} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥")
                bot.edit_message_text(
                    chat_id=call.message.chat.id, 
                    message_id=call.message.message_id,
                    text=f"**–ö–∞–Ω–∞–ª {ch} –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥.**",
                    parse_mode="Markdown"
                )
            else:
                bot.answer_callback_query(call.id, "–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∫–∞–Ω–∞–ª")
        except Exception as e:
            bot.answer_callback_query(call.id, f"–•–∞—Ç–æ–≥”£: {e}")

@bot.callback_query_handler(func=lambda call: call.data == "back_to_panel")
def callback_back_to_panel(call):
    if is_admin(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        panel(call.message)

@bot.message_handler(func=lambda msg: msg.text == "üîô –ë–æ–∑–≥–∞—à—Ç" and is_admin(msg.from_user.id))
def back_to_main(msg):
    start(msg)

@bot.message_handler(func=lambda msg: msg.text == "üîô –ë–æ–∑–≥–∞—à—Ç –±–∞ –ø–∞–Ω–µ–ª" and is_admin(msg.from_user.id))
def back_to_panel(msg):
    panel(msg)

@bot.message_handler(content_types=["video"])
def save_movie(msg):
    if user_states.get(msg.chat.id) == "waiting_for_movie" and is_admin(msg.from_user.id):
        movie_id = str(random.randint(1000, 9999))
        while movie_id in db["movies"]:
            movie_id = str(random.randint(1000, 9999))
            
        movie_info_temp[msg.chat.id] = {"id": movie_id, "file_id": msg.video.file_id}
        user_states[msg.chat.id] = "waiting_for_movie_info"
        bot.send_message(msg.chat.id, "**–ú–∞—ä–ª—É–º–æ—Ç–∏ —Ñ–∏–ª–º—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥ —ë /skip –Ω–∞–≤–∏—Å–µ–¥:**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_movie_info")
def add_movie_info(msg):
    movie_info = "" if msg.text == "/skip" else msg.text
    movie_id = movie_info_temp[msg.chat.id]["id"]
    file_id = movie_info_temp[msg.chat.id]["file_id"]

    db["movies"][movie_id] = {"file_id": file_id, "info": movie_info}
    save_db()
    bot.send_message(msg.chat.id, f"**–°–∞–±—Ç —à—É–¥. ID —Ñ–∏–ª–º: {movie_id}**", parse_mode="Markdown")
    user_states.pop(msg.chat.id)
    movie_info_temp.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_channel")
def save_channel(msg):
    if is_admin(msg.from_user.id):
        channel = extract_channel_username(msg.text)
        
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ –∫–∞–Ω–∞–ª–∏ –º–∞–≤“∑—É–¥
        if channel in db["channels"]:
            bot.send_message(msg.chat.id, "**–ò–Ω –∫–∞–Ω–∞–ª –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä –±–æ—Ç –º–∞–≤“∑—É–¥ –∞—Å—Ç.**", parse_mode="Markdown")
            return
        
        # –°–∞–Ω“∑–∏–¥–∞–Ω–∏ –¥—É—Ä—É—Å—Ç–∏–∏ –∫–∞–Ω–∞–ª
        try:
            bot.get_chat(channel)
            db["channels"].append(channel)
            save_db()
            bot.send_message(msg.chat.id, f"**–ö–∞–Ω–∞–ª {channel} —Å–∞–±—Ç —à—É–¥.**", parse_mode="Markdown")
        except Exception as e:
            bot.send_message(msg.chat.id, f"**–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ —Å–∞–±—Ç–∏ –∫–∞–Ω–∞–ª: {e}**\n**–ë–æ–≤–∞—Ä”£ “≥–æ—Å–∏–ª –∫—É–Ω–µ–¥, –∫–∏ –Ω–æ–º–∏ –∫–∞–Ω–∞–ª —ë –ª–∏–Ω–∫ –¥—É—Ä—É—Å—Ç –∞—Å—Ç.**", parse_mode="Markdown")
        user_states.pop(msg.chat.id)

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_movie")
def process_delete_movie(msg):
    if is_admin(msg.from_user.id):
        movie_id = msg.text
        if movie_id in db["movies"]:
            db["movies"].pop(movie_id)
            save_db()
            bot.send_message(msg.chat.id, "**–§–∏–ª–º –Ω–µ—Å—Ç —à—É–¥.**", parse_mode="Markdown")
        else:
            bot.send_message(msg.chat.id, "**–§–∏–ª–º —ë—Ñ—Ç –Ω–∞—à—É–¥.**", parse_mode="Markdown")
        user_states.pop(msg.chat.id)

def schedule_delete_message(chat_id, message_id, delete_time):
    """–§—É–Ω–∫—Å–∏—è –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∏ –ø–∞—ë–º –±–∞—ä–¥ –∞–∑ –≤–∞“õ—Ç–∏ –º—É–∞–π—è–Ω"""
    time.sleep(delete_time)
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º: {e}")

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_movie_id")
def serve_movie(msg):
    if is_subscribed(msg.chat.id):
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ ID —Ñ–∏–ª–º
        movie_id = msg.text
        
        # –°–∞–Ω“∑–∏—à –±–∞—Ä–æ–∏ –º–∞“∑–º”Ø–∞
        if movie_id in db["collections"]:
            # –†–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ “≥—É—à–¥–æ—Ä –¥–∞—Ä –±–æ—Ä–∞–∏ –≤–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω
            warning_msg = bot.send_message(
                msg.chat.id, 
                f"**‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –ò–Ω —Ñ–∏–ª–º“≥–æ –±–∞—ä–¥–∏ {db['delete_time']} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–Ω–¥. –õ—É—Ç—Ñ–∞–Ω, –∞–≥–∞—Ä –∑–∞—Ä—É—Ä –±–æ—à–∞–¥ –±–∞ –¥”Ø—Å—Ç–æ–Ω —ë –±–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ñ–∏—Ä–∏—Å—Ç–µ–¥! ‚ö†Ô∏è**", 
                parse_mode="Markdown"
            )
            
            # –†–∞–≤–æ–Ω –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞–º–∞–∏ —Ñ–∏–ª–º“≥–æ–∏ –º–∞“∑–º”Ø–∞
            bot.send_message(msg.chat.id, "**–ú–∞“∑–º”Ø–∞–∏ —Ñ–∏–ª–º“≥–æ –±–æ ID " + movie_id + ":**", parse_mode="Markdown")
            for movie in db["collections"][movie_id]["movies"]:
                sent_movie = bot.send_video(msg.chat.id, movie["file_id"])
                # Scheduling message deletion after the specified time
                threading.Thread(
                    target=schedule_delete_message,
                    args=(msg.chat.id, sent_movie.message_id, db['delete_time'])
                ).start()
            
            # Schedule deletion for the warning message as well
            threading.Thread(
                target=schedule_delete_message,
                args=(msg.chat.id, warning_msg.message_id, db['delete_time'])
            ).start()
            
            user_states.pop(msg.chat.id)
            return
        
        # Check for regular movie
        if movie_id in db["movies"]:
            # Send warning about auto-deletion
            warning_msg = bot.send_message(
                msg.chat.id, 
                f"**‚ö†Ô∏è –î–∏“õ“õ–∞—Ç! –ò–Ω —Ñ–∏–ª–º –±–∞—ä–¥–∏ {db['delete_time']} —Å–æ–Ω–∏—è –Ω–µ—Å—Ç –º–µ—à–∞–≤–∞–¥. –õ—É—Ç—Ñ–∞–Ω, –∞–≥–∞—Ä –∑–∞—Ä—É—Ä –±–æ—à–∞–¥ –±–∞ –¥”Ø—Å—Ç–æ–Ω —ë –±–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ñ–∏—Ä–∏—Å—Ç–µ–¥! ‚ö†Ô∏è**", 
                parse_mode="Markdown"
            )
            
            # Send the movie
            movie_data = db["movies"][movie_id]
            info = movie_data.get("info", "")
            if info:
                info_msg = bot.send_message(msg.chat.id, f"**üé¨ –§–∏–ª–º –±–æ ID {movie_id}:**\n\n{info}", parse_mode="Markdown")
                # Schedule deletion for info message
                threading.Thread(
                    target=schedule_delete_message, 
                    args=(msg.chat.id, info_msg.message_id, db['delete_time'])
                ).start()
            
            # Send video and schedule its deletion
            sent_movie = bot.send_video(msg.chat.id, movie_data["file_id"])
            threading.Thread(
                target=schedule_delete_message, 
                args=(msg.chat.id, sent_movie.message_id, db['delete_time'])
            ).start()
            
            # Schedule deletion for warning message
            threading.Thread(
                target=schedule_delete_message, 
                args=(msg.chat.id, warning_msg.message_id, db['delete_time'])
            ).start()
        else:
            bot.send_message(msg.chat.id, "**–§–∏–ª–º –±–æ —á—É–Ω–∏–Ω ID —ë—Ñ—Ç –Ω–∞—à—É–¥.**", parse_mode="Markdown")
        
        user_states.pop(msg.chat.id)
    else:
        start(msg)

@bot.message_handler(func=lambda msg: msg.text == "‚è± –¢–∞–Ω–∑–∏–º–æ—Ç–∏ –≤–∞“õ—Ç" and is_admin(msg.from_user.id))
def time_settings(msg):
    user_states[msg.chat.id] = "waiting_for_delete_time"
    bot.send_message(
        msg.chat.id, 
        f"**–í–∞“õ—Ç–∏ “≥–æ–∑–∏—Ä–∞ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∏–ª–º“≥–æ: {db['delete_time']} —Å–æ–Ω–∏—è.**\n\n**–í–∞“õ—Ç–∏ –Ω–∞–≤—Ä–æ –±–æ —Å–æ–Ω–∏—è –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:**", 
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_delete_time")
def set_delete_time(msg):
    if is_admin(msg.from_user.id):
        try:
            delete_time = int(msg.text)
            if delete_time < 10:
                bot.send_message(msg.chat.id, "**–í–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –±–æ—è–¥ “≥–∞–¥–¥–∏ –∞“õ–∞–ª 10 —Å–æ–Ω–∏—è –±–æ—à–∞–¥.**", parse_mode="Markdown")
            else:
                db["delete_time"] = delete_time
                save_db()
                bot.send_message(msg.chat.id, f"**–í–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ —Ñ–∞–π–ª“≥–æ –±–∞ {delete_time} —Å–æ–Ω–∏—è —Ç–∞–Ω–∑–∏–º —à—É–¥.**", parse_mode="Markdown")
                user_states.pop(msg.chat.id)
        except ValueError:
            bot.send_message(msg.chat.id, "**–õ—É—Ç—Ñ–∞–Ω —Ç–∞–Ω“≥–æ —Ä–∞“õ–∞–º –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥.**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and is_admin(msg.from_user.id))
def statistics(msg):
    movie_count = len(db["movies"])
    channel_count = len(db["channels"])
    admin_count = len(db["admins"])
    collection_count = len(db["collections"])
    
    stats = f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n" \
           f"**üìΩ –®—É–º–æ—Ä–∞–∏ —Ñ–∏–ª–º“≥–æ:** {movie_count}\n" \
           f"**üì∫ –®—É–º–æ—Ä–∞–∏ –∫–∞–Ω–∞–ª“≥–æ:** {channel_count}\n" \
           f"**üë®‚Äçüíª –®—É–º–æ—Ä–∞–∏ –∞–¥–º–∏–Ω“≥–æ:** {admin_count}\n" \
           f"**üìö –®—É–º–æ—Ä–∞–∏ –º–∞“∑–º”Ø–∞“≥–æ:** {collection_count}\n" \
           f"**‚è± –í–∞“õ—Ç–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω:** {db['delete_time']} —Å–æ–Ω–∏—è"
    
    bot.send_message(msg.chat.id, stats, parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üóë –¢–æ–∑–∞–∫—É–Ω–∏–∏ –∫—ç—à" and is_admin(msg.from_user.id))
def clear_cache(msg):
    # –¢–æ–∑–∞–∫—É–Ω–∏–∏ –∫—ç—à–∏ –±–æ—Ç—Ä–æ –∏“∑—Ä–æ –º–µ–∫—É–Ω–µ–º
    user_states.clear()
    movie_info_temp.clear()
    collection_temp.clear()
    bot.send_message(msg.chat.id, "**üóë –ö—ç—à —Ç–æ–∑–∞ —à—É–¥.**", parse_mode="Markdown")

@bot.message_handler(func=lambda msg: msg.text == "üîÑ –ë–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω”£" and is_admin(msg.from_user.id))
def restore_backup(msg):
    user_states[msg.chat.id] = "waiting_for_backup"
    bot.send_message(
        msg.chat.id, 
        "**–ë–∞—Ä–æ–∏ –±–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω”£ —Ñ–∞–π–ª–∏ –∑–∞—Ö–∏—Ä–∞–≥–∏–∏ JSON-—Ä–æ —Ä–∞–≤–æ–Ω –∫—É–Ω–µ–¥:**", 
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda msg: user_states.get(msg.chat.id) == "waiting_for_backup", content_types=["document"])
def process_backup(msg):
    if is_admin(msg.from_user.id):
        try:
            file_info = bot.get_file(msg.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            # –°–∞–Ω“∑–∏—à–∏ JSON —Ñ–æ—Ä–º–∞—Ç
            try:
                json_data = json.loads(downloaded_file.decode('utf-8'))
                
                # –°–∞–Ω“∑–∏—à–∏ —Å–æ—Ö—Ç–æ—Ä–∏ JSON
                if not all(key in json_data for key in ["movies", "channels", "admins"]):
                    bot.send_message(msg.chat.id, "**‚ùå –§–∞–π–ª–∏ –Ω–æ–¥—É—Ä—É—Å—Ç. –°–æ—Ö—Ç–æ—Ä–∏ JSON –±–æ—è–¥ –¥—É—Ä—É—Å—Ç –±–æ—à–∞–¥.**", parse_mode="Markdown")
                    return
                
                # –ë–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω–∏–∏ –∞–¥–º–∏–Ω–∏ –∞—Å–ª”£ –∞–≥–∞—Ä –Ω–∞–±–æ—à–∞–¥
                if ADMIN_ID not in json_data["admins"]:
                    json_data["admins"].append(ADMIN_ID)
                
                # –°–∞–±—Ç –≤–∞ –±–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω”£
                with open("data.json", "w") as f:
                    json.dump(json_data, f)
                
                # –ë–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω–∏–∏ –≥–ª–æ–±–∞–ª–∏–∏ db
                global db
                db = json_data
                
                bot.send_message(msg.chat.id, "**‚úÖ –ú–∞—ä–ª—É–º–æ—Ç –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –±–∞—Ä“õ–∞—Ä–æ—Ä –∫–∞—Ä–¥–∞ —à—É–¥!**", parse_mode="Markdown")
            except json.JSONDecodeError:
                bot.send_message(msg.chat.id, "**‚ùå –§–∞–π–ª –±–æ—è–¥ —Ñ–æ—Ä–º–∞—Ç–∏ JSON –¥–æ—à—Ç–∞ –±–æ—à–∞–¥.**", parse_mode="Markdown")
                
        except Exception as e:
            bot.send_message(msg.chat.id, f"**‚ùå –•–∞—Ç–æ–≥”£ “≥–∞–Ω–≥–æ–º–∏ –±–∞—Ä“õ–∞—Ä–æ—Ä–∫—É–Ω”£: {e}**", parse_mode="Markdown")
        
        user_states.pop(msg.chat.id)

# –û“ì–æ–∑–∏ –±–æ—Ç
if __name__ == "__main__":
    # –ë–∞—Ä“õ–∞—Ä–æ—Ä –∫–∞—Ä–¥–∞–Ω–∏ –≤–µ–±—Ö—É–∫
    bot.remove_webhook()
    bot.set_webhook(url=f"https://films-bot-9fxf.onrender.com/7947429084:AAECl4VTgRdgv53IAixvZ5qgDMvABI8_d0o")
    
    # –û“ì–æ–∑–∏ —Å–µ—Ä–≤–µ—Ä Flask
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 11000)))
